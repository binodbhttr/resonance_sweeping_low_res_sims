* discindx=(mass<1e-7*2.324876e9) #converting mass to M_sun
    barsample=(r>1)*(r<3)*discindx 
    
    This is how the bar sample was taken for the high res simulations.
    
    In low res simulations, bar_anles were obtained using a large range in r and omitting the cut in mass
    
 This is the working code:
 Note that rotation was performed in barangles during the calculation in the low res version of similations:
 
 ##########
import numpy as np 
import pickle
from matplotlib import pyplot as plt
from galpy.util import coords as coords
import os
import sys
from procedure import *

save_datapath="./"

start=0
finish=510

orbit=open('bar.txt','w')
barangle=0.
oldbarangle=0.
#a=list()
for i in range(start,finish):
    snapshot=i
    snaparr = loadwholesnap(path,snapshot)
    mass=snaparr['mass']  #note mass here is in solar mass (use the factor 2.324876e9)
    r=snaparr['r']
    phi=snaparr['phi']
        
    #calculating bar_angle
    discindx=(mass<5000)
    #barsample=(r>1)*(r<4)*discindx
    barsample=(r<5)*(r>1)
    #counts, bins, patches=plt.hist(phi[barsample],bins=360,range=[-np.pi,np.pi])
    counts, _ = np.histogram(phi[barsample], bins = np.linspace(-np.pi, np.pi, 360))
    ff=np.fft.fft(counts-np.mean(counts))
    barangle=-np.angle(ff[2])/2.
    
    TU=9.778145/1000.
    
    if barangle>oldbarangle+np.pi:
        barangle=barangle-np.pi
    if barangle<oldbarangle:
        if (barangle+2*np.pi)>oldbarangle+np.pi:
            barangle=barangle-np.pi
    print("Calculated barangle at snapshot:",i," bar_angle is",np.rad2deg(barangle))
    print("%E %E" %(i,barangle), file=orbit, flush=True)
    oldbarangle=barangle
 
 
 #########

Now to caculate the pattern speed:

################
barstuff=np.genfromtxt('bar.txt')
time=barstuff[:,0]
angle=barstuff[:,1]
for i in range(len(angle)):
    if angle[i]<0:
        angle[i]=2*np.pi+angle[i]

print(angle)        

TU=0.00977
PS=np.empty(len(angle-1))
for i in range(1,len(angle)-1):
    PS[i-1]=(angle[i]-angle[i-1])/TU
    if angle[i]<angle[i-1]:
        diff=angle[i]-angle[i-1]
        ang_diff=angle[i]+np.pi-angle[i-1]
        #print("angle[i]<angle[i-1]",diff,ang_diff)
        PS[i-1]=ang_diff/TU
          
    if PS[i-1]<0.:
        ang_diff=angle[i]+2*np.pi-angle[i-1]
        #print(ang_diff)
        PS[i-1]=ang_diff/TU
        print(PS[i-1])
PS=PS*3.08567758/3.15576
plt.plot(time,PS)
plt.plot([0,5],[26,26])
#plt.ylim(25,30)
plt.ylabel(r'$\Omega_b$ (km/s /kpc)')
plt.xlabel('Time (Gyr)')
plt.show()
###############

The angles are in bar.txt (those are rotated)
The pattern speed is in pattern_speed.txt

There is also a backup pickle file of the pattern speed:
work2/resonance_sweeping_low_res_sims/0_to_510_fft_pattern_speed_sim_low_res_r1_to_5.ang



